// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	datachannel "github.com/steveh/ecstoolkit/datachannel"
	message "github.com/steveh/ecstoolkit/message"

	mock "github.com/stretchr/testify/mock"
)

// IDataChannel is an autogenerated mock type for the IDataChannel type
type IDataChannel struct {
	mock.Mock
}

type IDataChannel_Expecter struct {
	mock *mock.Mock
}

func (_m *IDataChannel) EXPECT() *IDataChannel_Expecter {
	return &IDataChannel_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *IDataChannel) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type IDataChannel_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) Close() *IDataChannel_Close_Call {
	return &IDataChannel_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *IDataChannel_Close_Call) Run(run func()) *IDataChannel_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_Close_Call) Return(_a0 error) *IDataChannel_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_Close_Call) RunAndReturn(run func() error) *IDataChannel_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeregisterOutputStreamHandler provides a mock function with given fields: handler
func (_m *IDataChannel) DeregisterOutputStreamHandler(handler datachannel.OutputStreamDataMessageHandler) {
	_m.Called(handler)
}

// IDataChannel_DeregisterOutputStreamHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeregisterOutputStreamHandler'
type IDataChannel_DeregisterOutputStreamHandler_Call struct {
	*mock.Call
}

// DeregisterOutputStreamHandler is a helper method to define mock.On call
//   - handler datachannel.OutputStreamDataMessageHandler
func (_e *IDataChannel_Expecter) DeregisterOutputStreamHandler(handler interface{}) *IDataChannel_DeregisterOutputStreamHandler_Call {
	return &IDataChannel_DeregisterOutputStreamHandler_Call{Call: _e.mock.On("DeregisterOutputStreamHandler", handler)}
}

func (_c *IDataChannel_DeregisterOutputStreamHandler_Call) Run(run func(handler datachannel.OutputStreamDataMessageHandler)) *IDataChannel_DeregisterOutputStreamHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datachannel.OutputStreamDataMessageHandler))
	})
	return _c
}

func (_c *IDataChannel_DeregisterOutputStreamHandler_Call) Return() *IDataChannel_DeregisterOutputStreamHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_DeregisterOutputStreamHandler_Call) RunAndReturn(run func(datachannel.OutputStreamDataMessageHandler)) *IDataChannel_DeregisterOutputStreamHandler_Call {
	_c.Run(run)
	return _c
}

// GetAgentVersion provides a mock function with no fields
func (_m *IDataChannel) GetAgentVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAgentVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IDataChannel_GetAgentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentVersion'
type IDataChannel_GetAgentVersion_Call struct {
	*mock.Call
}

// GetAgentVersion is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetAgentVersion() *IDataChannel_GetAgentVersion_Call {
	return &IDataChannel_GetAgentVersion_Call{Call: _e.mock.On("GetAgentVersion")}
}

func (_c *IDataChannel_GetAgentVersion_Call) Run(run func()) *IDataChannel_GetAgentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetAgentVersion_Call) Return(_a0 string) *IDataChannel_GetAgentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetAgentVersion_Call) RunAndReturn(run func() string) *IDataChannel_GetAgentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionProperties provides a mock function with no fields
func (_m *IDataChannel) GetSessionProperties() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSessionProperties")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// IDataChannel_GetSessionProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionProperties'
type IDataChannel_GetSessionProperties_Call struct {
	*mock.Call
}

// GetSessionProperties is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetSessionProperties() *IDataChannel_GetSessionProperties_Call {
	return &IDataChannel_GetSessionProperties_Call{Call: _e.mock.On("GetSessionProperties")}
}

func (_c *IDataChannel_GetSessionProperties_Call) Run(run func()) *IDataChannel_GetSessionProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetSessionProperties_Call) Return(_a0 interface{}) *IDataChannel_GetSessionProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetSessionProperties_Call) RunAndReturn(run func() interface{}) *IDataChannel_GetSessionProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionType provides a mock function with no fields
func (_m *IDataChannel) GetSessionType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSessionType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IDataChannel_GetSessionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionType'
type IDataChannel_GetSessionType_Call struct {
	*mock.Call
}

// GetSessionType is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetSessionType() *IDataChannel_GetSessionType_Call {
	return &IDataChannel_GetSessionType_Call{Call: _e.mock.On("GetSessionType")}
}

func (_c *IDataChannel_GetSessionType_Call) Run(run func()) *IDataChannel_GetSessionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetSessionType_Call) Return(_a0 string) *IDataChannel_GetSessionType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetSessionType_Call) RunAndReturn(run func() string) *IDataChannel_GetSessionType_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamDataSequenceNumber provides a mock function with no fields
func (_m *IDataChannel) GetStreamDataSequenceNumber() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStreamDataSequenceNumber")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IDataChannel_GetStreamDataSequenceNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamDataSequenceNumber'
type IDataChannel_GetStreamDataSequenceNumber_Call struct {
	*mock.Call
}

// GetStreamDataSequenceNumber is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetStreamDataSequenceNumber() *IDataChannel_GetStreamDataSequenceNumber_Call {
	return &IDataChannel_GetStreamDataSequenceNumber_Call{Call: _e.mock.On("GetStreamDataSequenceNumber")}
}

func (_c *IDataChannel_GetStreamDataSequenceNumber_Call) Run(run func()) *IDataChannel_GetStreamDataSequenceNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetStreamDataSequenceNumber_Call) Return(_a0 int64) *IDataChannel_GetStreamDataSequenceNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetStreamDataSequenceNumber_Call) RunAndReturn(run func() int64) *IDataChannel_GetStreamDataSequenceNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetTargetID provides a mock function with no fields
func (_m *IDataChannel) GetTargetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTargetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IDataChannel_GetTargetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTargetID'
type IDataChannel_GetTargetID_Call struct {
	*mock.Call
}

// GetTargetID is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetTargetID() *IDataChannel_GetTargetID_Call {
	return &IDataChannel_GetTargetID_Call{Call: _e.mock.On("GetTargetID")}
}

func (_c *IDataChannel_GetTargetID_Call) Run(run func()) *IDataChannel_GetTargetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetTargetID_Call) Return(_a0 string) *IDataChannel_GetTargetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetTargetID_Call) RunAndReturn(run func() string) *IDataChannel_GetTargetID_Call {
	_c.Call.Return(run)
	return _c
}

// IsSessionTypeSet provides a mock function with no fields
func (_m *IDataChannel) IsSessionTypeSet() chan bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSessionTypeSet")
	}

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// IDataChannel_IsSessionTypeSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSessionTypeSet'
type IDataChannel_IsSessionTypeSet_Call struct {
	*mock.Call
}

// IsSessionTypeSet is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) IsSessionTypeSet() *IDataChannel_IsSessionTypeSet_Call {
	return &IDataChannel_IsSessionTypeSet_Call{Call: _e.mock.On("IsSessionTypeSet")}
}

func (_c *IDataChannel_IsSessionTypeSet_Call) Run(run func()) *IDataChannel_IsSessionTypeSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_IsSessionTypeSet_Call) Return(_a0 chan bool) *IDataChannel_IsSessionTypeSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_IsSessionTypeSet_Call) RunAndReturn(run func() chan bool) *IDataChannel_IsSessionTypeSet_Call {
	_c.Call.Return(run)
	return _c
}

// IsStreamMessageResendTimeout provides a mock function with no fields
func (_m *IDataChannel) IsStreamMessageResendTimeout() chan bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStreamMessageResendTimeout")
	}

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// IDataChannel_IsStreamMessageResendTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStreamMessageResendTimeout'
type IDataChannel_IsStreamMessageResendTimeout_Call struct {
	*mock.Call
}

// IsStreamMessageResendTimeout is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) IsStreamMessageResendTimeout() *IDataChannel_IsStreamMessageResendTimeout_Call {
	return &IDataChannel_IsStreamMessageResendTimeout_Call{Call: _e.mock.On("IsStreamMessageResendTimeout")}
}

func (_c *IDataChannel_IsStreamMessageResendTimeout_Call) Run(run func()) *IDataChannel_IsStreamMessageResendTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_IsStreamMessageResendTimeout_Call) Return(_a0 chan bool) *IDataChannel_IsStreamMessageResendTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_IsStreamMessageResendTimeout_Call) RunAndReturn(run func() chan bool) *IDataChannel_IsStreamMessageResendTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with no fields
func (_m *IDataChannel) Open() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type IDataChannel_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) Open() *IDataChannel_Open_Call {
	return &IDataChannel_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *IDataChannel_Open_Call) Run(run func()) *IDataChannel_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_Open_Call) Return(_a0 error) *IDataChannel_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_Open_Call) RunAndReturn(run func() error) *IDataChannel_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Reconnect provides a mock function with no fields
func (_m *IDataChannel) Reconnect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_Reconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconnect'
type IDataChannel_Reconnect_Call struct {
	*mock.Call
}

// Reconnect is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) Reconnect() *IDataChannel_Reconnect_Call {
	return &IDataChannel_Reconnect_Call{Call: _e.mock.On("Reconnect")}
}

func (_c *IDataChannel_Reconnect_Call) Run(run func()) *IDataChannel_Reconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_Reconnect_Call) Return(_a0 error) *IDataChannel_Reconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_Reconnect_Call) RunAndReturn(run func() error) *IDataChannel_Reconnect_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterOutputMessageHandler provides a mock function with given fields: ctx, stopHandler, onMessageHandler
func (_m *IDataChannel) RegisterOutputMessageHandler(ctx context.Context, stopHandler datachannel.Stop, onMessageHandler func([]byte)) {
	_m.Called(ctx, stopHandler, onMessageHandler)
}

// IDataChannel_RegisterOutputMessageHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterOutputMessageHandler'
type IDataChannel_RegisterOutputMessageHandler_Call struct {
	*mock.Call
}

// RegisterOutputMessageHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - stopHandler datachannel.Stop
//   - onMessageHandler func([]byte)
func (_e *IDataChannel_Expecter) RegisterOutputMessageHandler(ctx interface{}, stopHandler interface{}, onMessageHandler interface{}) *IDataChannel_RegisterOutputMessageHandler_Call {
	return &IDataChannel_RegisterOutputMessageHandler_Call{Call: _e.mock.On("RegisterOutputMessageHandler", ctx, stopHandler, onMessageHandler)}
}

func (_c *IDataChannel_RegisterOutputMessageHandler_Call) Run(run func(ctx context.Context, stopHandler datachannel.Stop, onMessageHandler func([]byte))) *IDataChannel_RegisterOutputMessageHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(datachannel.Stop), args[2].(func([]byte)))
	})
	return _c
}

func (_c *IDataChannel_RegisterOutputMessageHandler_Call) Return() *IDataChannel_RegisterOutputMessageHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_RegisterOutputMessageHandler_Call) RunAndReturn(run func(context.Context, datachannel.Stop, func([]byte))) *IDataChannel_RegisterOutputMessageHandler_Call {
	_c.Run(run)
	return _c
}

// RegisterOutputStreamHandler provides a mock function with given fields: handler, isSessionSpecificHandler
func (_m *IDataChannel) RegisterOutputStreamHandler(handler datachannel.OutputStreamDataMessageHandler, isSessionSpecificHandler bool) {
	_m.Called(handler, isSessionSpecificHandler)
}

// IDataChannel_RegisterOutputStreamHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterOutputStreamHandler'
type IDataChannel_RegisterOutputStreamHandler_Call struct {
	*mock.Call
}

// RegisterOutputStreamHandler is a helper method to define mock.On call
//   - handler datachannel.OutputStreamDataMessageHandler
//   - isSessionSpecificHandler bool
func (_e *IDataChannel_Expecter) RegisterOutputStreamHandler(handler interface{}, isSessionSpecificHandler interface{}) *IDataChannel_RegisterOutputStreamHandler_Call {
	return &IDataChannel_RegisterOutputStreamHandler_Call{Call: _e.mock.On("RegisterOutputStreamHandler", handler, isSessionSpecificHandler)}
}

func (_c *IDataChannel_RegisterOutputStreamHandler_Call) Run(run func(handler datachannel.OutputStreamDataMessageHandler, isSessionSpecificHandler bool)) *IDataChannel_RegisterOutputStreamHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datachannel.OutputStreamDataMessageHandler), args[1].(bool))
	})
	return _c
}

func (_c *IDataChannel_RegisterOutputStreamHandler_Call) Return() *IDataChannel_RegisterOutputStreamHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_RegisterOutputStreamHandler_Call) RunAndReturn(run func(datachannel.OutputStreamDataMessageHandler, bool)) *IDataChannel_RegisterOutputStreamHandler_Call {
	_c.Run(run)
	return _c
}

// ResendStreamDataMessageScheduler provides a mock function with no fields
func (_m *IDataChannel) ResendStreamDataMessageScheduler() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResendStreamDataMessageScheduler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_ResendStreamDataMessageScheduler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResendStreamDataMessageScheduler'
type IDataChannel_ResendStreamDataMessageScheduler_Call struct {
	*mock.Call
}

// ResendStreamDataMessageScheduler is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) ResendStreamDataMessageScheduler() *IDataChannel_ResendStreamDataMessageScheduler_Call {
	return &IDataChannel_ResendStreamDataMessageScheduler_Call{Call: _e.mock.On("ResendStreamDataMessageScheduler")}
}

func (_c *IDataChannel_ResendStreamDataMessageScheduler_Call) Run(run func()) *IDataChannel_ResendStreamDataMessageScheduler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_ResendStreamDataMessageScheduler_Call) Return(_a0 error) *IDataChannel_ResendStreamDataMessageScheduler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_ResendStreamDataMessageScheduler_Call) RunAndReturn(run func() error) *IDataChannel_ResendStreamDataMessageScheduler_Call {
	_c.Call.Return(run)
	return _c
}

// SendFlag provides a mock function with given fields: flagType
func (_m *IDataChannel) SendFlag(flagType message.PayloadTypeFlag) error {
	ret := _m.Called(flagType)

	if len(ret) == 0 {
		panic("no return value specified for SendFlag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(message.PayloadTypeFlag) error); ok {
		r0 = rf(flagType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_SendFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendFlag'
type IDataChannel_SendFlag_Call struct {
	*mock.Call
}

// SendFlag is a helper method to define mock.On call
//   - flagType message.PayloadTypeFlag
func (_e *IDataChannel_Expecter) SendFlag(flagType interface{}) *IDataChannel_SendFlag_Call {
	return &IDataChannel_SendFlag_Call{Call: _e.mock.On("SendFlag", flagType)}
}

func (_c *IDataChannel_SendFlag_Call) Run(run func(flagType message.PayloadTypeFlag)) *IDataChannel_SendFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(message.PayloadTypeFlag))
	})
	return _c
}

func (_c *IDataChannel_SendFlag_Call) Return(_a0 error) *IDataChannel_SendFlag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_SendFlag_Call) RunAndReturn(run func(message.PayloadTypeFlag) error) *IDataChannel_SendFlag_Call {
	_c.Call.Return(run)
	return _c
}

// SendInputDataMessage provides a mock function with given fields: payloadType, inputData
func (_m *IDataChannel) SendInputDataMessage(payloadType message.PayloadType, inputData []byte) error {
	ret := _m.Called(payloadType, inputData)

	if len(ret) == 0 {
		panic("no return value specified for SendInputDataMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(message.PayloadType, []byte) error); ok {
		r0 = rf(payloadType, inputData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_SendInputDataMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInputDataMessage'
type IDataChannel_SendInputDataMessage_Call struct {
	*mock.Call
}

// SendInputDataMessage is a helper method to define mock.On call
//   - payloadType message.PayloadType
//   - inputData []byte
func (_e *IDataChannel_Expecter) SendInputDataMessage(payloadType interface{}, inputData interface{}) *IDataChannel_SendInputDataMessage_Call {
	return &IDataChannel_SendInputDataMessage_Call{Call: _e.mock.On("SendInputDataMessage", payloadType, inputData)}
}

func (_c *IDataChannel_SendInputDataMessage_Call) Run(run func(payloadType message.PayloadType, inputData []byte)) *IDataChannel_SendInputDataMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(message.PayloadType), args[1].([]byte))
	})
	return _c
}

func (_c *IDataChannel_SendInputDataMessage_Call) Return(_a0 error) *IDataChannel_SendInputDataMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_SendInputDataMessage_Call) RunAndReturn(run func(message.PayloadType, []byte) error) *IDataChannel_SendInputDataMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: input, inputType
func (_m *IDataChannel) SendMessage(input []byte, inputType int) error {
	ret := _m.Called(input, inputType)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, int) error); ok {
		r0 = rf(input, inputType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type IDataChannel_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - input []byte
//   - inputType int
func (_e *IDataChannel_Expecter) SendMessage(input interface{}, inputType interface{}) *IDataChannel_SendMessage_Call {
	return &IDataChannel_SendMessage_Call{Call: _e.mock.On("SendMessage", input, inputType)}
}

func (_c *IDataChannel_SendMessage_Call) Run(run func(input []byte, inputType int)) *IDataChannel_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int))
	})
	return _c
}

func (_c *IDataChannel_SendMessage_Call) Return(_a0 error) *IDataChannel_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_SendMessage_Call) RunAndReturn(run func([]byte, int) error) *IDataChannel_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetChannelToken provides a mock function with given fields: channelToken
func (_m *IDataChannel) SetChannelToken(channelToken string) {
	_m.Called(channelToken)
}

// IDataChannel_SetChannelToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetChannelToken'
type IDataChannel_SetChannelToken_Call struct {
	*mock.Call
}

// SetChannelToken is a helper method to define mock.On call
//   - channelToken string
func (_e *IDataChannel_Expecter) SetChannelToken(channelToken interface{}) *IDataChannel_SetChannelToken_Call {
	return &IDataChannel_SetChannelToken_Call{Call: _e.mock.On("SetChannelToken", channelToken)}
}

func (_c *IDataChannel_SetChannelToken_Call) Run(run func(channelToken string)) *IDataChannel_SetChannelToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IDataChannel_SetChannelToken_Call) Return() *IDataChannel_SetChannelToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_SetChannelToken_Call) RunAndReturn(run func(string)) *IDataChannel_SetChannelToken_Call {
	_c.Run(run)
	return _c
}

// SetOnError provides a mock function with given fields: onErrorHandler
func (_m *IDataChannel) SetOnError(onErrorHandler func(error)) {
	_m.Called(onErrorHandler)
}

// IDataChannel_SetOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOnError'
type IDataChannel_SetOnError_Call struct {
	*mock.Call
}

// SetOnError is a helper method to define mock.On call
//   - onErrorHandler func(error)
func (_e *IDataChannel_Expecter) SetOnError(onErrorHandler interface{}) *IDataChannel_SetOnError_Call {
	return &IDataChannel_SetOnError_Call{Call: _e.mock.On("SetOnError", onErrorHandler)}
}

func (_c *IDataChannel_SetOnError_Call) Run(run func(onErrorHandler func(error))) *IDataChannel_SetOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(error)))
	})
	return _c
}

func (_c *IDataChannel_SetOnError_Call) Return() *IDataChannel_SetOnError_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_SetOnError_Call) RunAndReturn(run func(func(error))) *IDataChannel_SetOnError_Call {
	_c.Run(run)
	return _c
}

// SetSessionType provides a mock function with given fields: sessionType
func (_m *IDataChannel) SetSessionType(sessionType string) {
	_m.Called(sessionType)
}

// IDataChannel_SetSessionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionType'
type IDataChannel_SetSessionType_Call struct {
	*mock.Call
}

// SetSessionType is a helper method to define mock.On call
//   - sessionType string
func (_e *IDataChannel_Expecter) SetSessionType(sessionType interface{}) *IDataChannel_SetSessionType_Call {
	return &IDataChannel_SetSessionType_Call{Call: _e.mock.On("SetSessionType", sessionType)}
}

func (_c *IDataChannel_SetSessionType_Call) Run(run func(sessionType string)) *IDataChannel_SetSessionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IDataChannel_SetSessionType_Call) Return() *IDataChannel_SetSessionType_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_SetSessionType_Call) RunAndReturn(run func(string)) *IDataChannel_SetSessionType_Call {
	_c.Run(run)
	return _c
}

// NewIDataChannel creates a new instance of IDataChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDataChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDataChannel {
	mock := &IDataChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
