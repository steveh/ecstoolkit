// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	communicator "github.com/steveh/ecstoolkit/communicator"

	datachannel "github.com/steveh/ecstoolkit/datachannel"

	list "container/list"

	message "github.com/steveh/ecstoolkit/message"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// IDataChannel is an autogenerated mock type for the IDataChannel type
type IDataChannel struct {
	mock.Mock
}

type IDataChannel_Expecter struct {
	mock *mock.Mock
}

func (_m *IDataChannel) EXPECT() *IDataChannel_Expecter {
	return &IDataChannel_Expecter{mock: &_m.Mock}
}

// AddDataToIncomingMessageBuffer provides a mock function with given fields: streamMessage
func (_m *IDataChannel) AddDataToIncomingMessageBuffer(streamMessage datachannel.StreamingMessage) {
	_m.Called(streamMessage)
}

// IDataChannel_AddDataToIncomingMessageBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDataToIncomingMessageBuffer'
type IDataChannel_AddDataToIncomingMessageBuffer_Call struct {
	*mock.Call
}

// AddDataToIncomingMessageBuffer is a helper method to define mock.On call
//   - streamMessage datachannel.StreamingMessage
func (_e *IDataChannel_Expecter) AddDataToIncomingMessageBuffer(streamMessage interface{}) *IDataChannel_AddDataToIncomingMessageBuffer_Call {
	return &IDataChannel_AddDataToIncomingMessageBuffer_Call{Call: _e.mock.On("AddDataToIncomingMessageBuffer", streamMessage)}
}

func (_c *IDataChannel_AddDataToIncomingMessageBuffer_Call) Run(run func(streamMessage datachannel.StreamingMessage)) *IDataChannel_AddDataToIncomingMessageBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datachannel.StreamingMessage))
	})
	return _c
}

func (_c *IDataChannel_AddDataToIncomingMessageBuffer_Call) Return() *IDataChannel_AddDataToIncomingMessageBuffer_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_AddDataToIncomingMessageBuffer_Call) RunAndReturn(run func(datachannel.StreamingMessage)) *IDataChannel_AddDataToIncomingMessageBuffer_Call {
	_c.Run(run)
	return _c
}

// AddDataToOutgoingMessageBuffer provides a mock function with given fields: streamMessage
func (_m *IDataChannel) AddDataToOutgoingMessageBuffer(streamMessage datachannel.StreamingMessage) {
	_m.Called(streamMessage)
}

// IDataChannel_AddDataToOutgoingMessageBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDataToOutgoingMessageBuffer'
type IDataChannel_AddDataToOutgoingMessageBuffer_Call struct {
	*mock.Call
}

// AddDataToOutgoingMessageBuffer is a helper method to define mock.On call
//   - streamMessage datachannel.StreamingMessage
func (_e *IDataChannel_Expecter) AddDataToOutgoingMessageBuffer(streamMessage interface{}) *IDataChannel_AddDataToOutgoingMessageBuffer_Call {
	return &IDataChannel_AddDataToOutgoingMessageBuffer_Call{Call: _e.mock.On("AddDataToOutgoingMessageBuffer", streamMessage)}
}

func (_c *IDataChannel_AddDataToOutgoingMessageBuffer_Call) Run(run func(streamMessage datachannel.StreamingMessage)) *IDataChannel_AddDataToOutgoingMessageBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datachannel.StreamingMessage))
	})
	return _c
}

func (_c *IDataChannel_AddDataToOutgoingMessageBuffer_Call) Return() *IDataChannel_AddDataToOutgoingMessageBuffer_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_AddDataToOutgoingMessageBuffer_Call) RunAndReturn(run func(datachannel.StreamingMessage)) *IDataChannel_AddDataToOutgoingMessageBuffer_Call {
	_c.Run(run)
	return _c
}

// CalculateRetransmissionTimeout provides a mock function with given fields: streamingMessage
func (_m *IDataChannel) CalculateRetransmissionTimeout(streamingMessage datachannel.StreamingMessage) {
	_m.Called(streamingMessage)
}

// IDataChannel_CalculateRetransmissionTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateRetransmissionTimeout'
type IDataChannel_CalculateRetransmissionTimeout_Call struct {
	*mock.Call
}

// CalculateRetransmissionTimeout is a helper method to define mock.On call
//   - streamingMessage datachannel.StreamingMessage
func (_e *IDataChannel_Expecter) CalculateRetransmissionTimeout(streamingMessage interface{}) *IDataChannel_CalculateRetransmissionTimeout_Call {
	return &IDataChannel_CalculateRetransmissionTimeout_Call{Call: _e.mock.On("CalculateRetransmissionTimeout", streamingMessage)}
}

func (_c *IDataChannel_CalculateRetransmissionTimeout_Call) Run(run func(streamingMessage datachannel.StreamingMessage)) *IDataChannel_CalculateRetransmissionTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datachannel.StreamingMessage))
	})
	return _c
}

func (_c *IDataChannel_CalculateRetransmissionTimeout_Call) Return() *IDataChannel_CalculateRetransmissionTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_CalculateRetransmissionTimeout_Call) RunAndReturn(run func(datachannel.StreamingMessage)) *IDataChannel_CalculateRetransmissionTimeout_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with given fields: log
func (_m *IDataChannel) Close(log *slog.Logger) error {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger) error); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type IDataChannel_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - log *slog.Logger
func (_e *IDataChannel_Expecter) Close(log interface{}) *IDataChannel_Close_Call {
	return &IDataChannel_Close_Call{Call: _e.mock.On("Close", log)}
}

func (_c *IDataChannel_Close_Call) Run(run func(log *slog.Logger)) *IDataChannel_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger))
	})
	return _c
}

func (_c *IDataChannel_Close_Call) Return(_a0 error) *IDataChannel_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_Close_Call) RunAndReturn(run func(*slog.Logger) error) *IDataChannel_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeregisterOutputStreamHandler provides a mock function with given fields: handler
func (_m *IDataChannel) DeregisterOutputStreamHandler(handler datachannel.OutputStreamDataMessageHandler) {
	_m.Called(handler)
}

// IDataChannel_DeregisterOutputStreamHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeregisterOutputStreamHandler'
type IDataChannel_DeregisterOutputStreamHandler_Call struct {
	*mock.Call
}

// DeregisterOutputStreamHandler is a helper method to define mock.On call
//   - handler datachannel.OutputStreamDataMessageHandler
func (_e *IDataChannel_Expecter) DeregisterOutputStreamHandler(handler interface{}) *IDataChannel_DeregisterOutputStreamHandler_Call {
	return &IDataChannel_DeregisterOutputStreamHandler_Call{Call: _e.mock.On("DeregisterOutputStreamHandler", handler)}
}

func (_c *IDataChannel_DeregisterOutputStreamHandler_Call) Run(run func(handler datachannel.OutputStreamDataMessageHandler)) *IDataChannel_DeregisterOutputStreamHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datachannel.OutputStreamDataMessageHandler))
	})
	return _c
}

func (_c *IDataChannel_DeregisterOutputStreamHandler_Call) Return() *IDataChannel_DeregisterOutputStreamHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_DeregisterOutputStreamHandler_Call) RunAndReturn(run func(datachannel.OutputStreamDataMessageHandler)) *IDataChannel_DeregisterOutputStreamHandler_Call {
	_c.Run(run)
	return _c
}

// FinalizeDataChannelHandshake provides a mock function with given fields: log, tokenValue
func (_m *IDataChannel) FinalizeDataChannelHandshake(log *slog.Logger, tokenValue string) error {
	ret := _m.Called(log, tokenValue)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeDataChannelHandshake")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger, string) error); ok {
		r0 = rf(log, tokenValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_FinalizeDataChannelHandshake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeDataChannelHandshake'
type IDataChannel_FinalizeDataChannelHandshake_Call struct {
	*mock.Call
}

// FinalizeDataChannelHandshake is a helper method to define mock.On call
//   - log *slog.Logger
//   - tokenValue string
func (_e *IDataChannel_Expecter) FinalizeDataChannelHandshake(log interface{}, tokenValue interface{}) *IDataChannel_FinalizeDataChannelHandshake_Call {
	return &IDataChannel_FinalizeDataChannelHandshake_Call{Call: _e.mock.On("FinalizeDataChannelHandshake", log, tokenValue)}
}

func (_c *IDataChannel_FinalizeDataChannelHandshake_Call) Run(run func(log *slog.Logger, tokenValue string)) *IDataChannel_FinalizeDataChannelHandshake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger), args[1].(string))
	})
	return _c
}

func (_c *IDataChannel_FinalizeDataChannelHandshake_Call) Return(_a0 error) *IDataChannel_FinalizeDataChannelHandshake_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_FinalizeDataChannelHandshake_Call) RunAndReturn(run func(*slog.Logger, string) error) *IDataChannel_FinalizeDataChannelHandshake_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgentVersion provides a mock function with no fields
func (_m *IDataChannel) GetAgentVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAgentVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IDataChannel_GetAgentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentVersion'
type IDataChannel_GetAgentVersion_Call struct {
	*mock.Call
}

// GetAgentVersion is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetAgentVersion() *IDataChannel_GetAgentVersion_Call {
	return &IDataChannel_GetAgentVersion_Call{Call: _e.mock.On("GetAgentVersion")}
}

func (_c *IDataChannel_GetAgentVersion_Call) Run(run func()) *IDataChannel_GetAgentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetAgentVersion_Call) Return(_a0 string) *IDataChannel_GetAgentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetAgentVersion_Call) RunAndReturn(run func() string) *IDataChannel_GetAgentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionProperties provides a mock function with no fields
func (_m *IDataChannel) GetSessionProperties() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSessionProperties")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// IDataChannel_GetSessionProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionProperties'
type IDataChannel_GetSessionProperties_Call struct {
	*mock.Call
}

// GetSessionProperties is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetSessionProperties() *IDataChannel_GetSessionProperties_Call {
	return &IDataChannel_GetSessionProperties_Call{Call: _e.mock.On("GetSessionProperties")}
}

func (_c *IDataChannel_GetSessionProperties_Call) Run(run func()) *IDataChannel_GetSessionProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetSessionProperties_Call) Return(_a0 interface{}) *IDataChannel_GetSessionProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetSessionProperties_Call) RunAndReturn(run func() interface{}) *IDataChannel_GetSessionProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionType provides a mock function with no fields
func (_m *IDataChannel) GetSessionType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSessionType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IDataChannel_GetSessionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionType'
type IDataChannel_GetSessionType_Call struct {
	*mock.Call
}

// GetSessionType is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetSessionType() *IDataChannel_GetSessionType_Call {
	return &IDataChannel_GetSessionType_Call{Call: _e.mock.On("GetSessionType")}
}

func (_c *IDataChannel_GetSessionType_Call) Run(run func()) *IDataChannel_GetSessionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetSessionType_Call) Return(_a0 string) *IDataChannel_GetSessionType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetSessionType_Call) RunAndReturn(run func() string) *IDataChannel_GetSessionType_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamDataSequenceNumber provides a mock function with no fields
func (_m *IDataChannel) GetStreamDataSequenceNumber() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStreamDataSequenceNumber")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IDataChannel_GetStreamDataSequenceNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamDataSequenceNumber'
type IDataChannel_GetStreamDataSequenceNumber_Call struct {
	*mock.Call
}

// GetStreamDataSequenceNumber is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetStreamDataSequenceNumber() *IDataChannel_GetStreamDataSequenceNumber_Call {
	return &IDataChannel_GetStreamDataSequenceNumber_Call{Call: _e.mock.On("GetStreamDataSequenceNumber")}
}

func (_c *IDataChannel_GetStreamDataSequenceNumber_Call) Run(run func()) *IDataChannel_GetStreamDataSequenceNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetStreamDataSequenceNumber_Call) Return(_a0 int64) *IDataChannel_GetStreamDataSequenceNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetStreamDataSequenceNumber_Call) RunAndReturn(run func() int64) *IDataChannel_GetStreamDataSequenceNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetWsChannel provides a mock function with no fields
func (_m *IDataChannel) GetWsChannel() communicator.IWebSocketChannel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWsChannel")
	}

	var r0 communicator.IWebSocketChannel
	if rf, ok := ret.Get(0).(func() communicator.IWebSocketChannel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(communicator.IWebSocketChannel)
		}
	}

	return r0
}

// IDataChannel_GetWsChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWsChannel'
type IDataChannel_GetWsChannel_Call struct {
	*mock.Call
}

// GetWsChannel is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) GetWsChannel() *IDataChannel_GetWsChannel_Call {
	return &IDataChannel_GetWsChannel_Call{Call: _e.mock.On("GetWsChannel")}
}

func (_c *IDataChannel_GetWsChannel_Call) Run(run func()) *IDataChannel_GetWsChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_GetWsChannel_Call) Return(_a0 communicator.IWebSocketChannel) *IDataChannel_GetWsChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_GetWsChannel_Call) RunAndReturn(run func() communicator.IWebSocketChannel) *IDataChannel_GetWsChannel_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: log, clientID, sessionID, targetID, isAwsCliUpgradeNeeded
func (_m *IDataChannel) Initialize(log *slog.Logger, clientID string, sessionID string, targetID string, isAwsCliUpgradeNeeded bool) {
	_m.Called(log, clientID, sessionID, targetID, isAwsCliUpgradeNeeded)
}

// IDataChannel_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type IDataChannel_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - log *slog.Logger
//   - clientID string
//   - sessionID string
//   - targetID string
//   - isAwsCliUpgradeNeeded bool
func (_e *IDataChannel_Expecter) Initialize(log interface{}, clientID interface{}, sessionID interface{}, targetID interface{}, isAwsCliUpgradeNeeded interface{}) *IDataChannel_Initialize_Call {
	return &IDataChannel_Initialize_Call{Call: _e.mock.On("Initialize", log, clientID, sessionID, targetID, isAwsCliUpgradeNeeded)}
}

func (_c *IDataChannel_Initialize_Call) Run(run func(log *slog.Logger, clientID string, sessionID string, targetID string, isAwsCliUpgradeNeeded bool)) *IDataChannel_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger), args[1].(string), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *IDataChannel_Initialize_Call) Return() *IDataChannel_Initialize_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_Initialize_Call) RunAndReturn(run func(*slog.Logger, string, string, string, bool)) *IDataChannel_Initialize_Call {
	_c.Run(run)
	return _c
}

// IsSessionTypeSet provides a mock function with no fields
func (_m *IDataChannel) IsSessionTypeSet() chan bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSessionTypeSet")
	}

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// IDataChannel_IsSessionTypeSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSessionTypeSet'
type IDataChannel_IsSessionTypeSet_Call struct {
	*mock.Call
}

// IsSessionTypeSet is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) IsSessionTypeSet() *IDataChannel_IsSessionTypeSet_Call {
	return &IDataChannel_IsSessionTypeSet_Call{Call: _e.mock.On("IsSessionTypeSet")}
}

func (_c *IDataChannel_IsSessionTypeSet_Call) Run(run func()) *IDataChannel_IsSessionTypeSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_IsSessionTypeSet_Call) Return(_a0 chan bool) *IDataChannel_IsSessionTypeSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_IsSessionTypeSet_Call) RunAndReturn(run func() chan bool) *IDataChannel_IsSessionTypeSet_Call {
	_c.Call.Return(run)
	return _c
}

// IsStreamMessageResendTimeout provides a mock function with no fields
func (_m *IDataChannel) IsStreamMessageResendTimeout() chan bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStreamMessageResendTimeout")
	}

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// IDataChannel_IsStreamMessageResendTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStreamMessageResendTimeout'
type IDataChannel_IsStreamMessageResendTimeout_Call struct {
	*mock.Call
}

// IsStreamMessageResendTimeout is a helper method to define mock.On call
func (_e *IDataChannel_Expecter) IsStreamMessageResendTimeout() *IDataChannel_IsStreamMessageResendTimeout_Call {
	return &IDataChannel_IsStreamMessageResendTimeout_Call{Call: _e.mock.On("IsStreamMessageResendTimeout")}
}

func (_c *IDataChannel_IsStreamMessageResendTimeout_Call) Run(run func()) *IDataChannel_IsStreamMessageResendTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDataChannel_IsStreamMessageResendTimeout_Call) Return(_a0 chan bool) *IDataChannel_IsStreamMessageResendTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_IsStreamMessageResendTimeout_Call) RunAndReturn(run func() chan bool) *IDataChannel_IsStreamMessageResendTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: log
func (_m *IDataChannel) Open(log *slog.Logger) error {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger) error); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type IDataChannel_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - log *slog.Logger
func (_e *IDataChannel_Expecter) Open(log interface{}) *IDataChannel_Open_Call {
	return &IDataChannel_Open_Call{Call: _e.mock.On("Open", log)}
}

func (_c *IDataChannel_Open_Call) Run(run func(log *slog.Logger)) *IDataChannel_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger))
	})
	return _c
}

func (_c *IDataChannel_Open_Call) Return(_a0 error) *IDataChannel_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_Open_Call) RunAndReturn(run func(*slog.Logger) error) *IDataChannel_Open_Call {
	_c.Call.Return(run)
	return _c
}

// OutputMessageHandler provides a mock function with given fields: ctx, log, stopHandler, sessionID, rawMessage
func (_m *IDataChannel) OutputMessageHandler(ctx context.Context, log *slog.Logger, stopHandler datachannel.Stop, sessionID string, rawMessage []byte) error {
	ret := _m.Called(ctx, log, stopHandler, sessionID, rawMessage)

	if len(ret) == 0 {
		panic("no return value specified for OutputMessageHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, datachannel.Stop, string, []byte) error); ok {
		r0 = rf(ctx, log, stopHandler, sessionID, rawMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_OutputMessageHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutputMessageHandler'
type IDataChannel_OutputMessageHandler_Call struct {
	*mock.Call
}

// OutputMessageHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - log *slog.Logger
//   - stopHandler datachannel.Stop
//   - sessionID string
//   - rawMessage []byte
func (_e *IDataChannel_Expecter) OutputMessageHandler(ctx interface{}, log interface{}, stopHandler interface{}, sessionID interface{}, rawMessage interface{}) *IDataChannel_OutputMessageHandler_Call {
	return &IDataChannel_OutputMessageHandler_Call{Call: _e.mock.On("OutputMessageHandler", ctx, log, stopHandler, sessionID, rawMessage)}
}

func (_c *IDataChannel_OutputMessageHandler_Call) Run(run func(ctx context.Context, log *slog.Logger, stopHandler datachannel.Stop, sessionID string, rawMessage []byte)) *IDataChannel_OutputMessageHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*slog.Logger), args[2].(datachannel.Stop), args[3].(string), args[4].([]byte))
	})
	return _c
}

func (_c *IDataChannel_OutputMessageHandler_Call) Return(_a0 error) *IDataChannel_OutputMessageHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_OutputMessageHandler_Call) RunAndReturn(run func(context.Context, *slog.Logger, datachannel.Stop, string, []byte) error) *IDataChannel_OutputMessageHandler_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessAcknowledgedMessage provides a mock function with given fields: log, acknowledgeMessageContent
func (_m *IDataChannel) ProcessAcknowledgedMessage(log *slog.Logger, acknowledgeMessageContent message.AcknowledgeContent) error {
	ret := _m.Called(log, acknowledgeMessageContent)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAcknowledgedMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger, message.AcknowledgeContent) error); ok {
		r0 = rf(log, acknowledgeMessageContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_ProcessAcknowledgedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessAcknowledgedMessage'
type IDataChannel_ProcessAcknowledgedMessage_Call struct {
	*mock.Call
}

// ProcessAcknowledgedMessage is a helper method to define mock.On call
//   - log *slog.Logger
//   - acknowledgeMessageContent message.AcknowledgeContent
func (_e *IDataChannel_Expecter) ProcessAcknowledgedMessage(log interface{}, acknowledgeMessageContent interface{}) *IDataChannel_ProcessAcknowledgedMessage_Call {
	return &IDataChannel_ProcessAcknowledgedMessage_Call{Call: _e.mock.On("ProcessAcknowledgedMessage", log, acknowledgeMessageContent)}
}

func (_c *IDataChannel_ProcessAcknowledgedMessage_Call) Run(run func(log *slog.Logger, acknowledgeMessageContent message.AcknowledgeContent)) *IDataChannel_ProcessAcknowledgedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger), args[1].(message.AcknowledgeContent))
	})
	return _c
}

func (_c *IDataChannel_ProcessAcknowledgedMessage_Call) Return(_a0 error) *IDataChannel_ProcessAcknowledgedMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_ProcessAcknowledgedMessage_Call) RunAndReturn(run func(*slog.Logger, message.AcknowledgeContent) error) *IDataChannel_ProcessAcknowledgedMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Reconnect provides a mock function with given fields: log
func (_m *IDataChannel) Reconnect(log *slog.Logger) error {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for Reconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger) error); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_Reconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconnect'
type IDataChannel_Reconnect_Call struct {
	*mock.Call
}

// Reconnect is a helper method to define mock.On call
//   - log *slog.Logger
func (_e *IDataChannel_Expecter) Reconnect(log interface{}) *IDataChannel_Reconnect_Call {
	return &IDataChannel_Reconnect_Call{Call: _e.mock.On("Reconnect", log)}
}

func (_c *IDataChannel_Reconnect_Call) Run(run func(log *slog.Logger)) *IDataChannel_Reconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger))
	})
	return _c
}

func (_c *IDataChannel_Reconnect_Call) Return(_a0 error) *IDataChannel_Reconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_Reconnect_Call) RunAndReturn(run func(*slog.Logger) error) *IDataChannel_Reconnect_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterOutputStreamHandler provides a mock function with given fields: handler, isSessionSpecificHandler
func (_m *IDataChannel) RegisterOutputStreamHandler(handler datachannel.OutputStreamDataMessageHandler, isSessionSpecificHandler bool) {
	_m.Called(handler, isSessionSpecificHandler)
}

// IDataChannel_RegisterOutputStreamHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterOutputStreamHandler'
type IDataChannel_RegisterOutputStreamHandler_Call struct {
	*mock.Call
}

// RegisterOutputStreamHandler is a helper method to define mock.On call
//   - handler datachannel.OutputStreamDataMessageHandler
//   - isSessionSpecificHandler bool
func (_e *IDataChannel_Expecter) RegisterOutputStreamHandler(handler interface{}, isSessionSpecificHandler interface{}) *IDataChannel_RegisterOutputStreamHandler_Call {
	return &IDataChannel_RegisterOutputStreamHandler_Call{Call: _e.mock.On("RegisterOutputStreamHandler", handler, isSessionSpecificHandler)}
}

func (_c *IDataChannel_RegisterOutputStreamHandler_Call) Run(run func(handler datachannel.OutputStreamDataMessageHandler, isSessionSpecificHandler bool)) *IDataChannel_RegisterOutputStreamHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datachannel.OutputStreamDataMessageHandler), args[1].(bool))
	})
	return _c
}

func (_c *IDataChannel_RegisterOutputStreamHandler_Call) Return() *IDataChannel_RegisterOutputStreamHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_RegisterOutputStreamHandler_Call) RunAndReturn(run func(datachannel.OutputStreamDataMessageHandler, bool)) *IDataChannel_RegisterOutputStreamHandler_Call {
	_c.Run(run)
	return _c
}

// RemoveDataFromIncomingMessageBuffer provides a mock function with given fields: sequenceNumber
func (_m *IDataChannel) RemoveDataFromIncomingMessageBuffer(sequenceNumber int64) {
	_m.Called(sequenceNumber)
}

// IDataChannel_RemoveDataFromIncomingMessageBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDataFromIncomingMessageBuffer'
type IDataChannel_RemoveDataFromIncomingMessageBuffer_Call struct {
	*mock.Call
}

// RemoveDataFromIncomingMessageBuffer is a helper method to define mock.On call
//   - sequenceNumber int64
func (_e *IDataChannel_Expecter) RemoveDataFromIncomingMessageBuffer(sequenceNumber interface{}) *IDataChannel_RemoveDataFromIncomingMessageBuffer_Call {
	return &IDataChannel_RemoveDataFromIncomingMessageBuffer_Call{Call: _e.mock.On("RemoveDataFromIncomingMessageBuffer", sequenceNumber)}
}

func (_c *IDataChannel_RemoveDataFromIncomingMessageBuffer_Call) Run(run func(sequenceNumber int64)) *IDataChannel_RemoveDataFromIncomingMessageBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *IDataChannel_RemoveDataFromIncomingMessageBuffer_Call) Return() *IDataChannel_RemoveDataFromIncomingMessageBuffer_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_RemoveDataFromIncomingMessageBuffer_Call) RunAndReturn(run func(int64)) *IDataChannel_RemoveDataFromIncomingMessageBuffer_Call {
	_c.Run(run)
	return _c
}

// RemoveDataFromOutgoingMessageBuffer provides a mock function with given fields: streamMessageElement
func (_m *IDataChannel) RemoveDataFromOutgoingMessageBuffer(streamMessageElement *list.Element) {
	_m.Called(streamMessageElement)
}

// IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDataFromOutgoingMessageBuffer'
type IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call struct {
	*mock.Call
}

// RemoveDataFromOutgoingMessageBuffer is a helper method to define mock.On call
//   - streamMessageElement *list.Element
func (_e *IDataChannel_Expecter) RemoveDataFromOutgoingMessageBuffer(streamMessageElement interface{}) *IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call {
	return &IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call{Call: _e.mock.On("RemoveDataFromOutgoingMessageBuffer", streamMessageElement)}
}

func (_c *IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call) Run(run func(streamMessageElement *list.Element)) *IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*list.Element))
	})
	return _c
}

func (_c *IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call) Return() *IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call) RunAndReturn(run func(*list.Element)) *IDataChannel_RemoveDataFromOutgoingMessageBuffer_Call {
	_c.Run(run)
	return _c
}

// ResendStreamDataMessageScheduler provides a mock function with given fields: log
func (_m *IDataChannel) ResendStreamDataMessageScheduler(log *slog.Logger) error {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ResendStreamDataMessageScheduler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger) error); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_ResendStreamDataMessageScheduler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResendStreamDataMessageScheduler'
type IDataChannel_ResendStreamDataMessageScheduler_Call struct {
	*mock.Call
}

// ResendStreamDataMessageScheduler is a helper method to define mock.On call
//   - log *slog.Logger
func (_e *IDataChannel_Expecter) ResendStreamDataMessageScheduler(log interface{}) *IDataChannel_ResendStreamDataMessageScheduler_Call {
	return &IDataChannel_ResendStreamDataMessageScheduler_Call{Call: _e.mock.On("ResendStreamDataMessageScheduler", log)}
}

func (_c *IDataChannel_ResendStreamDataMessageScheduler_Call) Run(run func(log *slog.Logger)) *IDataChannel_ResendStreamDataMessageScheduler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger))
	})
	return _c
}

func (_c *IDataChannel_ResendStreamDataMessageScheduler_Call) Return(_a0 error) *IDataChannel_ResendStreamDataMessageScheduler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_ResendStreamDataMessageScheduler_Call) RunAndReturn(run func(*slog.Logger) error) *IDataChannel_ResendStreamDataMessageScheduler_Call {
	_c.Call.Return(run)
	return _c
}

// SendAcknowledgeMessage provides a mock function with given fields: log, clientMessage
func (_m *IDataChannel) SendAcknowledgeMessage(log *slog.Logger, clientMessage message.ClientMessage) error {
	ret := _m.Called(log, clientMessage)

	if len(ret) == 0 {
		panic("no return value specified for SendAcknowledgeMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger, message.ClientMessage) error); ok {
		r0 = rf(log, clientMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_SendAcknowledgeMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAcknowledgeMessage'
type IDataChannel_SendAcknowledgeMessage_Call struct {
	*mock.Call
}

// SendAcknowledgeMessage is a helper method to define mock.On call
//   - log *slog.Logger
//   - clientMessage message.ClientMessage
func (_e *IDataChannel_Expecter) SendAcknowledgeMessage(log interface{}, clientMessage interface{}) *IDataChannel_SendAcknowledgeMessage_Call {
	return &IDataChannel_SendAcknowledgeMessage_Call{Call: _e.mock.On("SendAcknowledgeMessage", log, clientMessage)}
}

func (_c *IDataChannel_SendAcknowledgeMessage_Call) Run(run func(log *slog.Logger, clientMessage message.ClientMessage)) *IDataChannel_SendAcknowledgeMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger), args[1].(message.ClientMessage))
	})
	return _c
}

func (_c *IDataChannel_SendAcknowledgeMessage_Call) Return(_a0 error) *IDataChannel_SendAcknowledgeMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_SendAcknowledgeMessage_Call) RunAndReturn(run func(*slog.Logger, message.ClientMessage) error) *IDataChannel_SendAcknowledgeMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendFlag provides a mock function with given fields: log, flagType
func (_m *IDataChannel) SendFlag(log *slog.Logger, flagType message.PayloadTypeFlag) error {
	ret := _m.Called(log, flagType)

	if len(ret) == 0 {
		panic("no return value specified for SendFlag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger, message.PayloadTypeFlag) error); ok {
		r0 = rf(log, flagType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_SendFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendFlag'
type IDataChannel_SendFlag_Call struct {
	*mock.Call
}

// SendFlag is a helper method to define mock.On call
//   - log *slog.Logger
//   - flagType message.PayloadTypeFlag
func (_e *IDataChannel_Expecter) SendFlag(log interface{}, flagType interface{}) *IDataChannel_SendFlag_Call {
	return &IDataChannel_SendFlag_Call{Call: _e.mock.On("SendFlag", log, flagType)}
}

func (_c *IDataChannel_SendFlag_Call) Run(run func(log *slog.Logger, flagType message.PayloadTypeFlag)) *IDataChannel_SendFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger), args[1].(message.PayloadTypeFlag))
	})
	return _c
}

func (_c *IDataChannel_SendFlag_Call) Return(_a0 error) *IDataChannel_SendFlag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_SendFlag_Call) RunAndReturn(run func(*slog.Logger, message.PayloadTypeFlag) error) *IDataChannel_SendFlag_Call {
	_c.Call.Return(run)
	return _c
}

// SendInputDataMessage provides a mock function with given fields: log, payloadType, inputData
func (_m *IDataChannel) SendInputDataMessage(log *slog.Logger, payloadType message.PayloadType, inputData []byte) error {
	ret := _m.Called(log, payloadType, inputData)

	if len(ret) == 0 {
		panic("no return value specified for SendInputDataMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*slog.Logger, message.PayloadType, []byte) error); ok {
		r0 = rf(log, payloadType, inputData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_SendInputDataMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInputDataMessage'
type IDataChannel_SendInputDataMessage_Call struct {
	*mock.Call
}

// SendInputDataMessage is a helper method to define mock.On call
//   - log *slog.Logger
//   - payloadType message.PayloadType
//   - inputData []byte
func (_e *IDataChannel_Expecter) SendInputDataMessage(log interface{}, payloadType interface{}, inputData interface{}) *IDataChannel_SendInputDataMessage_Call {
	return &IDataChannel_SendInputDataMessage_Call{Call: _e.mock.On("SendInputDataMessage", log, payloadType, inputData)}
}

func (_c *IDataChannel_SendInputDataMessage_Call) Run(run func(log *slog.Logger, payloadType message.PayloadType, inputData []byte)) *IDataChannel_SendInputDataMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger), args[1].(message.PayloadType), args[2].([]byte))
	})
	return _c
}

func (_c *IDataChannel_SendInputDataMessage_Call) Return(_a0 error) *IDataChannel_SendInputDataMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_SendInputDataMessage_Call) RunAndReturn(run func(*slog.Logger, message.PayloadType, []byte) error) *IDataChannel_SendInputDataMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: input, inputType
func (_m *IDataChannel) SendMessage(input []byte, inputType int) error {
	ret := _m.Called(input, inputType)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, int) error); ok {
		r0 = rf(input, inputType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDataChannel_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type IDataChannel_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - input []byte
//   - inputType int
func (_e *IDataChannel_Expecter) SendMessage(input interface{}, inputType interface{}) *IDataChannel_SendMessage_Call {
	return &IDataChannel_SendMessage_Call{Call: _e.mock.On("SendMessage", input, inputType)}
}

func (_c *IDataChannel_SendMessage_Call) Run(run func(input []byte, inputType int)) *IDataChannel_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int))
	})
	return _c
}

func (_c *IDataChannel_SendMessage_Call) Return(_a0 error) *IDataChannel_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDataChannel_SendMessage_Call) RunAndReturn(run func([]byte, int) error) *IDataChannel_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetAgentVersion provides a mock function with given fields: agentVersion
func (_m *IDataChannel) SetAgentVersion(agentVersion string) {
	_m.Called(agentVersion)
}

// IDataChannel_SetAgentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAgentVersion'
type IDataChannel_SetAgentVersion_Call struct {
	*mock.Call
}

// SetAgentVersion is a helper method to define mock.On call
//   - agentVersion string
func (_e *IDataChannel_Expecter) SetAgentVersion(agentVersion interface{}) *IDataChannel_SetAgentVersion_Call {
	return &IDataChannel_SetAgentVersion_Call{Call: _e.mock.On("SetAgentVersion", agentVersion)}
}

func (_c *IDataChannel_SetAgentVersion_Call) Run(run func(agentVersion string)) *IDataChannel_SetAgentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IDataChannel_SetAgentVersion_Call) Return() *IDataChannel_SetAgentVersion_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_SetAgentVersion_Call) RunAndReturn(run func(string)) *IDataChannel_SetAgentVersion_Call {
	_c.Run(run)
	return _c
}

// SetSessionType provides a mock function with given fields: sessionType
func (_m *IDataChannel) SetSessionType(sessionType string) {
	_m.Called(sessionType)
}

// IDataChannel_SetSessionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionType'
type IDataChannel_SetSessionType_Call struct {
	*mock.Call
}

// SetSessionType is a helper method to define mock.On call
//   - sessionType string
func (_e *IDataChannel_Expecter) SetSessionType(sessionType interface{}) *IDataChannel_SetSessionType_Call {
	return &IDataChannel_SetSessionType_Call{Call: _e.mock.On("SetSessionType", sessionType)}
}

func (_c *IDataChannel_SetSessionType_Call) Run(run func(sessionType string)) *IDataChannel_SetSessionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IDataChannel_SetSessionType_Call) Return() *IDataChannel_SetSessionType_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_SetSessionType_Call) RunAndReturn(run func(string)) *IDataChannel_SetSessionType_Call {
	_c.Run(run)
	return _c
}

// SetWebsocket provides a mock function with given fields: log, streamURL, tokenValue
func (_m *IDataChannel) SetWebsocket(log *slog.Logger, streamURL string, tokenValue string) {
	_m.Called(log, streamURL, tokenValue)
}

// IDataChannel_SetWebsocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWebsocket'
type IDataChannel_SetWebsocket_Call struct {
	*mock.Call
}

// SetWebsocket is a helper method to define mock.On call
//   - log *slog.Logger
//   - streamURL string
//   - tokenValue string
func (_e *IDataChannel_Expecter) SetWebsocket(log interface{}, streamURL interface{}, tokenValue interface{}) *IDataChannel_SetWebsocket_Call {
	return &IDataChannel_SetWebsocket_Call{Call: _e.mock.On("SetWebsocket", log, streamURL, tokenValue)}
}

func (_c *IDataChannel_SetWebsocket_Call) Run(run func(log *slog.Logger, streamURL string, tokenValue string)) *IDataChannel_SetWebsocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IDataChannel_SetWebsocket_Call) Return() *IDataChannel_SetWebsocket_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_SetWebsocket_Call) RunAndReturn(run func(*slog.Logger, string, string)) *IDataChannel_SetWebsocket_Call {
	_c.Run(run)
	return _c
}

// SetWsChannel provides a mock function with given fields: wsChannel
func (_m *IDataChannel) SetWsChannel(wsChannel communicator.IWebSocketChannel) {
	_m.Called(wsChannel)
}

// IDataChannel_SetWsChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWsChannel'
type IDataChannel_SetWsChannel_Call struct {
	*mock.Call
}

// SetWsChannel is a helper method to define mock.On call
//   - wsChannel communicator.IWebSocketChannel
func (_e *IDataChannel_Expecter) SetWsChannel(wsChannel interface{}) *IDataChannel_SetWsChannel_Call {
	return &IDataChannel_SetWsChannel_Call{Call: _e.mock.On("SetWsChannel", wsChannel)}
}

func (_c *IDataChannel_SetWsChannel_Call) Run(run func(wsChannel communicator.IWebSocketChannel)) *IDataChannel_SetWsChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(communicator.IWebSocketChannel))
	})
	return _c
}

func (_c *IDataChannel_SetWsChannel_Call) Return() *IDataChannel_SetWsChannel_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDataChannel_SetWsChannel_Call) RunAndReturn(run func(communicator.IWebSocketChannel)) *IDataChannel_SetWsChannel_Call {
	_c.Run(run)
	return _c
}

// NewIDataChannel creates a new instance of IDataChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDataChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDataChannel {
	mock := &IDataChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
